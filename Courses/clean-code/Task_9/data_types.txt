1.
Before:
double min_dist = scene->min_dist_from_point(ray.get_position());
double dist = min_dist;

After:
long double min_dist = scene->min_dist_from_point(ray.get_position());
long double dist = min_dist;

// Увелечение точности

2.
Before:
double x_offset = cords.x / window.size.x;

After:
Window(Vector2 position, Vector2 size) : position(position) {
    if (size == 0) {
        throw std::invalid_argument( "received zero value" );
    }
    if (size < 0) {
        throw std::invalid_argument( "received negative value" );
    }
    this->size = size;
}

// Добавление проверки деления на ноль

3.
Before:
while ((dist < 80) && (min_dist > 0)) {...}

After:
while ((dist < 80) && (min_dist > 0.00001)) {...}

// min_dist это вещественное число было возможно не каректное сравнение

4.
Before:
return true ? z.x * z.x + z.y * z.y < 8 : false;

After:
bool is_too_big = z.x * z.x + z.y * z.y < 8;
return true ? is_too_big : false;

// Добавление булевой переменной в условие

5.
Before:
return vec / vector_length(vec);

After:
long double length = vector_length(vec);
if (length == 0) {
    throw std::invalid_argument( "received zero vector" );
}
return vec / vector_length;

// Проверка деления на ноль

6.
Before:
re /= arg;
im /= arg;

After:
if (arg == 0) {
    throw std::invalid_argument( "received zero value" );
}
re /= arg;
im /= arg;

// Проверка деления на ноль

7.
Before:
double min_dist = 99999999999999999999999.0;

After:
long double min_dist = std::numeric_limits<long double>::max();

// Избавился от магического числа

8.
Before:
double steps_on_check = 1;

After:
int steps_on_check = 1;

// Замена вещественного числа на целое

9.
Before:
if (SDL_Init(SDL_INIT_VIDEO) < 0) {...}

After:
bool initialized = SDL_Init(SDL_INIT_VIDEO) < 0;
if (initialized) {...}

// Добавил булеву переменную в условие

10.
Before:
speed += force / mass;

After:
if (mass == 0) {
    throw std::invalid_argument( "received zero value" );
}

// Добавил проверку деления на ноль

11.
Before:
if (DistanceBetweenBodies(scene->bodies[i], scene->bodies[j]) <
    scene->bodies[i]->GetRadius() + scene->bodies[j]->GetRadius()){...}

After:
bool collide = DistanceBetweenBodies(scene->bodies[i], scene->bodies[j]) <
    scene->bodies[i]->GetRadius() + scene->bodies[j]->GetRadius()
if (collide) {...}

// Добавил булеву переменную в условие

12.
Before:
float f = (b1->GetMass() * b2->GetMass() / (dist*dist)) * 0.006;

After:
if (dist == 0) {
    f = 0
} else {
    float f = (b1->GetMass() * b2->GetMass() / (dist*dist)) * 0.006;
}

// Проверка деления на ноль
